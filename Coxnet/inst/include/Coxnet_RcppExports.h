// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __Coxnet_RcppExports_h__
#define __Coxnet_RcppExports_h__

#include <RcppEigen.h>
#include <Rcpp.h>

namespace Coxnet {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("Coxnet", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("Coxnet", "Coxnet_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in Coxnet");
            }
        }
    }

    inline List scaleC(Eigen::MatrixXd X) {
        typedef SEXP(*Ptr_scaleC)(SEXP);
        static Ptr_scaleC p_scaleC = NULL;
        if (p_scaleC == NULL) {
            validateSignature("List(*scaleC)(Eigen::MatrixXd)");
            p_scaleC = (Ptr_scaleC)R_GetCCallable("Coxnet", "Coxnet_scaleC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_scaleC(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline double softC(double z, double lambda) {
        typedef SEXP(*Ptr_softC)(SEXP,SEXP);
        static Ptr_softC p_softC = NULL;
        if (p_softC == NULL) {
            validateSignature("double(*softC)(double,double)");
            p_softC = (Ptr_softC)R_GetCCallable("Coxnet", "Coxnet_softC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_softC(Rcpp::wrap(z), Rcpp::wrap(lambda));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline List OmegaC(Eigen::MatrixXd& Omega, Eigen::VectorXi& sgn) {
        typedef SEXP(*Ptr_OmegaC)(SEXP,SEXP);
        static Ptr_OmegaC p_OmegaC = NULL;
        if (p_OmegaC == NULL) {
            validateSignature("List(*OmegaC)(Eigen::MatrixXd&,Eigen::VectorXi&)");
            p_OmegaC = (Ptr_OmegaC)R_GetCCallable("Coxnet", "Coxnet_OmegaC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_OmegaC(Rcpp::wrap(Omega), Rcpp::wrap(sgn));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List OmegaSC(Eigen::SparseMatrix<double>& OmegaS, Eigen::VectorXi& sgn) {
        typedef SEXP(*Ptr_OmegaSC)(SEXP,SEXP);
        static Ptr_OmegaSC p_OmegaSC = NULL;
        if (p_OmegaSC == NULL) {
            validateSignature("List(*OmegaSC)(Eigen::SparseMatrix<double>&,Eigen::VectorXi&)");
            p_OmegaSC = (Ptr_OmegaSC)R_GetCCallable("Coxnet", "Coxnet_OmegaSC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_OmegaSC(Rcpp::wrap(OmegaS), Rcpp::wrap(sgn));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline double max_lambdaC(Eigen::MatrixXd X, Eigen::VectorXd tevent, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, double alpha, Eigen::VectorXd wbeta, int N0) {
        typedef SEXP(*Ptr_max_lambdaC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_max_lambdaC p_max_lambdaC = NULL;
        if (p_max_lambdaC == NULL) {
            validateSignature("double(*max_lambdaC)(Eigen::MatrixXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,double,Eigen::VectorXd,int)");
            p_max_lambdaC = (Ptr_max_lambdaC)R_GetCCallable("Coxnet", "Coxnet_max_lambdaC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_max_lambdaC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(alpha), Rcpp::wrap(wbeta), Rcpp::wrap(N0));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double pletaCm(Eigen::VectorXd& xb, Eigen::VectorXd& exb, Eigen::VectorXi& nevent, Eigen::VectorXi& nevent1, Eigen::VectorXi& loc1, int& n, int& ifast, int& itwo) {
        typedef SEXP(*Ptr_pletaCm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pletaCm p_pletaCm = NULL;
        if (p_pletaCm == NULL) {
            validateSignature("double(*pletaCm)(Eigen::VectorXd&,Eigen::VectorXd&,Eigen::VectorXi&,Eigen::VectorXi&,Eigen::VectorXi&,int&,int&,int&)");
            p_pletaCm = (Ptr_pletaCm)R_GetCCallable("Coxnet", "Coxnet_pletaCm");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_pletaCm(Rcpp::wrap(xb), Rcpp::wrap(exb), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(ifast), Rcpp::wrap(itwo));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline Eigen::VectorXd cvtrimC(Eigen::VectorXd beta, int nn, int nn2, Eigen::VectorXi loco, Eigen::MatrixXd XF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF, Eigen::MatrixXd X, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int ifast, int itwo) {
        typedef SEXP(*Ptr_cvtrimC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvtrimC p_cvtrimC = NULL;
        if (p_cvtrimC == NULL) {
            validateSignature("Eigen::VectorXd(*cvtrimC)(Eigen::VectorXd,int,int,Eigen::VectorXi,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int)");
            p_cvtrimC = (Ptr_cvtrimC)R_GetCCallable("Coxnet", "Coxnet_cvtrimC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvtrimC(Rcpp::wrap(beta), Rcpp::wrap(nn), Rcpp::wrap(nn2), Rcpp::wrap(loco), Rcpp::wrap(XF), Rcpp::wrap(NF), Rcpp::wrap(neventF), Rcpp::wrap(nevent1F), Rcpp::wrap(loc1F), Rcpp::wrap(nF), Rcpp::wrap(X), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(ifast), Rcpp::wrap(itwo));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Eigen::VectorXd >(__result);
    }

    inline List coxenetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast) {
        typedef SEXP(*Ptr_coxenetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_coxenetC p_coxenetC = NULL;
        if (p_coxenetC == NULL) {
            validateSignature("List(*coxenetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int)");
            p_coxenetC = (Ptr_coxenetC)R_GetCCallable("Coxnet", "Coxnet_coxenetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_coxenetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(maxit), Rcpp::wrap(ifast));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List cvcoxenetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast, Eigen::MatrixXd XF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF) {
        typedef SEXP(*Ptr_cvcoxenetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvcoxenetC p_cvcoxenetC = NULL;
        if (p_cvcoxenetC == NULL) {
            validateSignature("List(*cvcoxenetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_cvcoxenetC = (Ptr_cvcoxenetC)R_GetCCallable("Coxnet", "Coxnet_cvcoxenetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvcoxenetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(maxit), Rcpp::wrap(ifast), Rcpp::wrap(XF), Rcpp::wrap(NF), Rcpp::wrap(neventF), Rcpp::wrap(nevent1F), Rcpp::wrap(loc1F), Rcpp::wrap(nF));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List coxnetC(Eigen::MatrixXd& X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::SparseMatrix<double>& Omega, Eigen::MatrixXd loc, Eigen::VectorXi nadj, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast) {
        typedef SEXP(*Ptr_coxnetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_coxnetC p_coxnetC = NULL;
        if (p_coxnetC == NULL) {
            validateSignature("List(*coxnetC)(Eigen::MatrixXd&,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::SparseMatrix<double>&,Eigen::MatrixXd,Eigen::VectorXi,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int)");
            p_coxnetC = (Ptr_coxnetC)R_GetCCallable("Coxnet", "Coxnet_coxnetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_coxnetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(Omega), Rcpp::wrap(loc), Rcpp::wrap(nadj), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(maxit), Rcpp::wrap(ifast));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List cvcoxnetC(Eigen::MatrixXd& X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::SparseMatrix<double>& Omega, Eigen::MatrixXd loc, Eigen::VectorXi nadj, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, int maxit, int ifast, Eigen::MatrixXd XF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF) {
        typedef SEXP(*Ptr_cvcoxnetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvcoxnetC p_cvcoxnetC = NULL;
        if (p_cvcoxnetC == NULL) {
            validateSignature("List(*cvcoxnetC)(Eigen::MatrixXd&,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::SparseMatrix<double>&,Eigen::MatrixXd,Eigen::VectorXi,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,int,int,Eigen::MatrixXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_cvcoxnetC = (Ptr_cvcoxnetC)R_GetCCallable("Coxnet", "Coxnet_cvcoxnetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvcoxnetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(Omega), Rcpp::wrap(loc), Rcpp::wrap(nadj), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(maxit), Rcpp::wrap(ifast), Rcpp::wrap(XF), Rcpp::wrap(NF), Rcpp::wrap(neventF), Rcpp::wrap(nevent1F), Rcpp::wrap(loc1F), Rcpp::wrap(nF));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline double max_loclambdaC(Eigen::MatrixXd X, Eigen::VectorXd tevent, Eigen::VectorXd Kh, Eigen::VectorXd Kh1, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, double alpha, Eigen::VectorXd wbeta, int N0) {
        typedef SEXP(*Ptr_max_loclambdaC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_max_loclambdaC p_max_loclambdaC = NULL;
        if (p_max_loclambdaC == NULL) {
            validateSignature("double(*max_loclambdaC)(Eigen::MatrixXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,double,Eigen::VectorXd,int)");
            p_max_loclambdaC = (Ptr_max_loclambdaC)R_GetCCallable("Coxnet", "Coxnet_max_loclambdaC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_max_loclambdaC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(Kh), Rcpp::wrap(Kh1), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(alpha), Rcpp::wrap(wbeta), Rcpp::wrap(N0));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline Eigen::MatrixXd alocletaC(Eigen::ArrayXd eta, Eigen::VectorXd tevent, Eigen::VectorXd Kh, Eigen::VectorXd Kh1, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n) {
        typedef SEXP(*Ptr_alocletaC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_alocletaC p_alocletaC = NULL;
        if (p_alocletaC == NULL) {
            validateSignature("Eigen::MatrixXd(*alocletaC)(Eigen::ArrayXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_alocletaC = (Ptr_alocletaC)R_GetCCallable("Coxnet", "Coxnet_alocletaC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_alocletaC(Rcpp::wrap(eta), Rcpp::wrap(tevent), Rcpp::wrap(Kh), Rcpp::wrap(Kh1), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Eigen::MatrixXd >(__result);
    }

    inline double locletaC(Eigen::ArrayXd eta, Eigen::VectorXd Kh, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n) {
        typedef SEXP(*Ptr_locletaC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_locletaC p_locletaC = NULL;
        if (p_locletaC == NULL) {
            validateSignature("double(*locletaC)(Eigen::ArrayXd,Eigen::VectorXd,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_locletaC = (Ptr_locletaC)R_GetCCallable("Coxnet", "Coxnet_locletaC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_locletaC(Rcpp::wrap(eta), Rcpp::wrap(Kh), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double loceobjF(Eigen::VectorXd beta, Eigen::ArrayXd eta, Eigen::VectorXd lambda1, double lambda2, Eigen::VectorXd Kh, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int N0) {
        typedef SEXP(*Ptr_loceobjF)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_loceobjF p_loceobjF = NULL;
        if (p_loceobjF == NULL) {
            validateSignature("double(*loceobjF)(Eigen::VectorXd,Eigen::ArrayXd,Eigen::VectorXd,double,Eigen::VectorXd,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int)");
            p_loceobjF = (Ptr_loceobjF)R_GetCCallable("Coxnet", "Coxnet_loceobjF");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_loceobjF(Rcpp::wrap(beta), Rcpp::wrap(eta), Rcpp::wrap(lambda1), Rcpp::wrap(lambda2), Rcpp::wrap(Kh), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(N0));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double loclbetaC(Eigen::VectorXd beta, Eigen::MatrixXd X, Eigen::VectorXd Kh, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n) {
        typedef SEXP(*Ptr_loclbetaC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_loclbetaC p_loclbetaC = NULL;
        if (p_loclbetaC == NULL) {
            validateSignature("double(*loclbetaC)(Eigen::VectorXd,Eigen::MatrixXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_loclbetaC = (Ptr_loclbetaC)R_GetCCallable("Coxnet", "Coxnet_loclbetaC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_loclbetaC(Rcpp::wrap(beta), Rcpp::wrap(X), Rcpp::wrap(Kh), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline List locoxenetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::VectorXd Kh, Eigen::VectorXd Kh1, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, double thresh2, int maxit) {
        typedef SEXP(*Ptr_locoxenetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_locoxenetC p_locoxenetC = NULL;
        if (p_locoxenetC == NULL) {
            validateSignature("List(*locoxenetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,double,int)");
            p_locoxenetC = (Ptr_locoxenetC)R_GetCCallable("Coxnet", "Coxnet_locoxenetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_locoxenetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(Kh), Rcpp::wrap(Kh1), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(thresh2), Rcpp::wrap(maxit));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List cvlocoxenetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::VectorXd Kh, Eigen::VectorXd Kh1, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, double thresh2, int maxit, Eigen::MatrixXd XF, Eigen::VectorXd KhF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF) {
        typedef SEXP(*Ptr_cvlocoxenetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvlocoxenetC p_cvlocoxenetC = NULL;
        if (p_cvlocoxenetC == NULL) {
            validateSignature("List(*cvlocoxenetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,double,int,Eigen::MatrixXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_cvlocoxenetC = (Ptr_cvlocoxenetC)R_GetCCallable("Coxnet", "Coxnet_cvlocoxenetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvlocoxenetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(Kh), Rcpp::wrap(Kh1), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(thresh2), Rcpp::wrap(maxit), Rcpp::wrap(XF), Rcpp::wrap(KhF), Rcpp::wrap(NF), Rcpp::wrap(neventF), Rcpp::wrap(nevent1F), Rcpp::wrap(loc1F), Rcpp::wrap(nF));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List locoxnetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::MatrixXd L, Eigen::MatrixXd Omega, Eigen::VectorXd Kh, Eigen::VectorXd Kh1, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, double thresh2, int maxit) {
        typedef SEXP(*Ptr_locoxnetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_locoxnetC p_locoxnetC = NULL;
        if (p_locoxnetC == NULL) {
            validateSignature("List(*locoxnetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::MatrixXd,Eigen::MatrixXd,Eigen::VectorXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,double,int)");
            p_locoxnetC = (Ptr_locoxnetC)R_GetCCallable("Coxnet", "Coxnet_locoxnetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_locoxnetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(L), Rcpp::wrap(Omega), Rcpp::wrap(Kh), Rcpp::wrap(Kh1), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(thresh2), Rcpp::wrap(maxit));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List cvlocoxnetC(Eigen::MatrixXd X, Eigen::VectorXd tevent, double alpha, Eigen::VectorXd lambda, int nlambda, Eigen::VectorXd wbeta, Eigen::MatrixXd L, Eigen::MatrixXd Omega, Eigen::VectorXd Kh, Eigen::VectorXd Kh1, int N, Eigen::VectorXi nevent, Eigen::VectorXi nevent1, Eigen::VectorXi loc1, int n, int p, int N0, double thresh, double thresh2, int maxit, Eigen::MatrixXd XF, Eigen::VectorXd KhF, int NF, Eigen::VectorXi neventF, Eigen::VectorXi nevent1F, Eigen::VectorXi loc1F, int nF) {
        typedef SEXP(*Ptr_cvlocoxnetC)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cvlocoxnetC p_cvlocoxnetC = NULL;
        if (p_cvlocoxnetC == NULL) {
            validateSignature("List(*cvlocoxnetC)(Eigen::MatrixXd,Eigen::VectorXd,double,Eigen::VectorXd,int,Eigen::VectorXd,Eigen::MatrixXd,Eigen::MatrixXd,Eigen::VectorXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int,int,int,double,double,int,Eigen::MatrixXd,Eigen::VectorXd,int,Eigen::VectorXi,Eigen::VectorXi,Eigen::VectorXi,int)");
            p_cvlocoxnetC = (Ptr_cvlocoxnetC)R_GetCCallable("Coxnet", "Coxnet_cvlocoxnetC");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cvlocoxnetC(Rcpp::wrap(X), Rcpp::wrap(tevent), Rcpp::wrap(alpha), Rcpp::wrap(lambda), Rcpp::wrap(nlambda), Rcpp::wrap(wbeta), Rcpp::wrap(L), Rcpp::wrap(Omega), Rcpp::wrap(Kh), Rcpp::wrap(Kh1), Rcpp::wrap(N), Rcpp::wrap(nevent), Rcpp::wrap(nevent1), Rcpp::wrap(loc1), Rcpp::wrap(n), Rcpp::wrap(p), Rcpp::wrap(N0), Rcpp::wrap(thresh), Rcpp::wrap(thresh2), Rcpp::wrap(maxit), Rcpp::wrap(XF), Rcpp::wrap(KhF), Rcpp::wrap(NF), Rcpp::wrap(neventF), Rcpp::wrap(nevent1F), Rcpp::wrap(loc1F), Rcpp::wrap(nF));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

}

#endif // __Coxnet_RcppExports_h__
